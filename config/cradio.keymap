/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>


&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <300>;
};
&sk {    release-after-ms = <500>;};

#define HOM 0
#define NUM 1
#define VIM 2
#define FUN 3
#define LOC 4

/ { 

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&lt 0 ESC>;
        };
        combo_alt {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&sk LALT>;
        };
        combo_shift {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&sk LSHFT>;
        };
	combo_shiftright {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&sk LSHFT>;
        };
        combo_meta {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&sk LMETA>;
        };
        combo_apostrophe {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp APOS>;
        };
        combo_ctrl {
            timeout-ms = <50>;
            key-positions = <26 27 28>;
            bindings = <&sk LCTRL>;
        };
	combo_ctrlalt {
            timeout-ms = <50>;
            key-positions = <21 22 23>;
            bindings = <&sk LCTRL>;
        };
        combo_altgr {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&sk RALT>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&mt LC(LSHFT) TAB>;
        };
	combo_lnum {
            timeout-ms = <50>;
            key-positions = <23 30>;
            bindings = <&sl NUM>;
        };
        combo_lvim {
            timeout-ms = <50>;
            key-positions = <22 30>;
            bindings = <&sl VIM>;
        };
	combo_lfun {
            timeout-ms = <50>;
            key-positions = <21 30>;
            bindings = <&sl FUN>;
        };
	combo_lnumlock {
            timeout-ms = <50>;
            key-positions = <23 31>;
            bindings = <&tog NUM>;
        };
        combo_lvimlock {
            timeout-ms = <50>;
            key-positions = <22 31>;
            bindings = <&tog VIM>;
        };
	combo_lfunlock {
            timeout-ms = <50>;
            key-positions = <21 31>;
            bindings = <&tog FUN>;
        };
	combo_rnum {
            timeout-ms = <50>;
            key-positions = <26 33>;
            bindings = <&sl NUM>;
        };
        combo_rvim {
            timeout-ms = <50>;
            key-positions = <27 33>;
            bindings = <&sl VIM>;
        };
	combo_rfun {
            timeout-ms = <50>;
            key-positions = <28 33>;
            bindings = <&sl FUN>;
        };
	combo_lock {
            key-positions = <2 7 20 29 30 33>;
            bindings = <&to LOC>;
        };
    };

    macros {
        prev_word: prev_word {
            label = "prev_word";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp LEFT>
                , <&macro_release &kp LCTRL>
                ;
        };
        next_word: next_word {
            label = "next_word";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp RIGHT>
                , <&macro_release &kp LCTRL>
                ;
        };
    };
    
        keymap {
                compatible = "zmk,keymap";
                
       		home_layer {
		bindings = <
		&kp Q &kp W &kp E &kp R &kp T        &kp Y &kp U  &kp I    &kp O   &kp P 
		&kp A &kp S &kp D &kp F &kp G        &kp H &kp J  &kp K    &kp L   &kp SEMI 
		&kp Z &kp X &kp C &kp V &kp B        &kp N &kp M  &kp CMMA &kp DOT &kp SLASH 
          	             &kp BSPC &kp DEL        &kp RET &kp SPC   
		>;
		};

       		num_layer {
		bindings = <
	        &ext_power EP_TOG   &bt BT_PRV      &bt BT_CLR  &bt BT_NXT &kp LBKT           &kp RBKT  &kp N7 &kp N8 &kp N9 &kp MINUS 
		&kp C_VOL_DN        &kp C_PREV      &kp C_PP    &kp C_NEXT &kp C_VOL_UP       &kp SLASH &kp N4  &kp N5 &kp N6  &kp PLUS 
		&bootloader         &kp NON_US_HASH &kp NON_US_BSLH    &trans  &kp EQUAL      &kp STAR  &kp N1 &kp N2 &kp N3  &kp DOT 
					                           &trans  &trans      &kp RET &kp N0 
		>;
		};
		
		vim_layer {
		bindings = <
		&trans &next_word &trans    &kp END  &trans           	&kp HOME &kp PG_UP &trans &trans    &kp PSCRN 
		&trans &trans     &kp PG_DN &trans   &trans             &kp LEFT &kp DOWN  &kp UP &kp RIGHT &trans
		&trans &trans     &trans    &trans   &prev_word         &trans   &trans    &trans &trans    &trans
					  &trans &trans  		&trans   &trans 
		>;
		};	
		
		loc_layer {
		bindings = <
		&none  &none &trans &none &none      &none &none &trans &none &none
		&none  &none &none  &none &none      &none &none &none &none &none
		&trans &none &none  &none &none      &none &none &none &none &trans
				   &trans &none      &none &trans
		>;
		};	
			
        
	};
};
