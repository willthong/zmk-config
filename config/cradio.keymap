/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <300>;
};

#define DEFAULT 0
#define NUM   1
#define VIM   2
#define FUN   3

/ { 

    combos {
        compatible = "zmk,combos";
        combo_tab {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp TAB>;
        };
        combo_ALTGR {
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&sk RALT>;
        };
        combo_equal {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp EQUAL>;
        };
        combo_esc {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp ESC>;
        };
        combo_apostrophe {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp APOS>;
        };
        combo_shift {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&sk LSHFT>;
        };
        combo_alt {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&sk LALT>;
        };
        combo_gui {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&sk LMETA>;
        };
        combo_ctrl {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&sk LCTRL>;
        };
	combo_numl {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&sl num_layer>;
        };
        combo_viml {
            timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&sl VIM>;
        };
	combo_funl {
            timeout-ms = <50>;
            key-positions = <30 32>;
            bindings = <&sl FUN>;
        };
    };

        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
		&kp Q &kp W &kp E &kp R &kp T        &kp Y &kp U  &kp I    &kp O   &kp P 
		&kp A &kp S &kp D &kp F &kp G        &kp H &kp J  &kp K    &kp L   &kp SEMI 
		&kp Z &kp X &kp C &kp V &kp B        &kp N &kp M  &kp CMMA &kp DOT &kp SLASH 
          	             &kp BSPC &kp DEL        &kp RET &kp SPC   
		>;
		};

       		num_layer {
		bindings = <
		&kp K_PWR       &bt BT_PRV   &bt BT_CLR  &bt BT_NXT &bootloader        &kp RBKT  &kp N7 &kp N8 &kp N9 &kp MINUS 
		&kp C_VOL_DOWN  &kp C_PREV   &kp C_PP    &kp C_NEXT &kp C_VOL_UP       &kp SLASH &kp N4  &kp N5 &kp N6  &kp PLUS 
		&trans          &trans       &trans      &trans     &trans             &kp STAR  &kp N1 &kp N2 &kp N3  &kp DOT 
					                           &trans  &trans      &kp RET &kp N0 
		>;
		};
		
		vim_layer {
		bindings = <
		&kp BANG  &kp ATSN &kp HASH  &kp DLLR  &kp PRCT    			&kp CRRT  &kp AMPS &kp KMLT &kp LPRN &kp RPRN 
		&kp HASH  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN 			&kp MINUS &kp KP_EQUAL  &kp LBRC  &kp RBRC   &kp BKSP
		&kp LSFT  &kp KPLS &kp LBKT &kp RBKT   &kp BSLH    			&kp UNDER &kp LEFT &kp DOWN &kp UP  &kp RIGHT
					  &trans &kp LCTL  				&kp SPC  &trans 
		>;
		};	
		
		fun_layer {
		bindings = <
		&kp NUM_1  &kp NUM_2    &kp NUM_3    &kp NUM_4    &kp NUM_5 			&trans &trans   &trans   &trans  &trans
		&kp F1 &kp F2 &kp F3 &kp F4 &kp F5  						&trans &kp PG_UP  &kp K_VOL_UP &kp K_MUTE &trans 
		&bt BT_CLR  &bt BT_NXT &bt BT_PRV &kp F6 &kp F7   				&trans &kp PG_DN  &kp K_VOL_DN  &trans &trans   
					 &trans &trans  					&trans &trans 
		>;
		};	
        
	};
};
